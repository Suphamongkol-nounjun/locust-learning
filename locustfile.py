from locust import HttpUser, task, between
import json
from dotenv import load_dotenv
import os

load_dotenv()
# def check_env_credentials():
#     """
#     ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å .env ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
#     """
#     username = os.environ.get("LOCUST_TEST_USERNAME")
#     password = os.environ.get("LOCUST_TEST_PASSWORD")
#     device = os.environ.get("LOCUST_TEST_DEVICE")
    
#     print("\n=============================================")
#     print("      üîë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Credentials ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env")
#     print("=============================================")
    
#     if username is None or password is None:
#         print("‚ùå ERROR: ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ LOCUST_TEST_USERNAME ‡∏´‡∏£‡∏∑‡∏≠ LOCUST_TEST_PASSWORD ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ!")
#         print("   ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
#         print("   - ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
#         print("   - ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô .env ‡∏™‡∏∞‡∏Å‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
#     else:
#         print(f"‚úÖ Username (LOCUST_TEST_USERNAME) ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {username}")
#         # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà print ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
#         print(f"‚úÖ Password (LOCUST_TEST_PASSWORD) ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {password[:2]}****{password[-2:]} (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å/‡∏´‡∏•‡∏±‡∏á)")
#         print(f"‚úÖ Device (LOCUST_TEST_DEVICE) ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {device}")
        
#     print("=============================================\n")
    
#     # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ Credentials ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
#     return {
#         "username": username,
#         "password": password,
#         "device": device
#     }

# # 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Global Variable
# USER_CREDENTIALS = check_env_credentials()

# üö® ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Credentials ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Login
# (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ Username/Password ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
USER_CREDENTIALS = {
    "username": os.environ.get("LOCUST_TEST_USERNAME"),
    "password": os.environ.get("LOCUST_TEST_PASSWORD"),
    "device": os.environ.get("LOCUST_TEST_DEVICE", "BACKEND") 
}

class HendrixAPILoadTest(HttpUser):
    """
    User Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load Test ‡∏£‡∏∞‡∏ö‡∏ö Hendrix API
    """
    host = "https://dev.notero.co/api" 
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Requests: 1 ‡∏ñ‡∏∂‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    wait_time = between(1, 5) 

    def on_start(self):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ User ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login)
        API: POST {{baseUrl}}/auth/login
        """
        print("--- Attempting Login ---")
        # ‡πÉ‡∏ä‡πâ Path /auth/login ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î name ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Locust UI ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        response = self.client.post(
            "/auth/login",
            json=USER_CREDENTIALS,
            name="/auth/login"
        )
        
        if response.status_code == 200:
            print("Login successful! Session started.")
            # Cookie (Session Token) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏î‡∏¢ Locust Client ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        else:
            print(f"Login failed! Status: {response.status_code}. Stopping user.")
            # ‡∏ñ‡πâ‡∏≤ Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á User ‡∏ô‡∏µ‡πâ
            self.environment.runner.quit() 


    # ------------------ Task ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á User (‡∏´‡∏•‡∏±‡∏á Login) ------------------

    @task(3)
    def verify_session(self):
        """
        Task: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Session
        API: GET {{baseUrl}}/auth/verify
        """
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Path ‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        self.client.get("/auth/verify", name="/auth/verify")


    @task(5)
    def get_library_song_list(self):
        """
        Task: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å Library (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å)
        API: GET {{baseUrl}}/library/song/list
        """
        # (5) ‡∏Ñ‡∏∑‡∏≠ Weight: Task ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Task ‡∏≠‡∏∑‡πà‡∏ô‡πÜ 5 ‡πÄ‡∏ó‡πà‡∏≤
        self.client.get("/library/song/list", name="/library/song/list")


    @task(2)
    def get_user_organization(self):
        """
        Task: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        API: GET {{baseUrl}}/user/organization
        """
        self.client.get("/user/organization", name="/user/organization")

    
    @task(1)
    def check_email_existence(self):
        """
        Task: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏õ‡πá‡∏ô Task ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≤)
        API: POST {{baseUrl}}/auth/check-email
        """
        data = {"email": USER_CREDENTIALS["username"]} # ‡πÉ‡∏ä‡πâ username ‡πÄ‡∏õ‡πá‡∏ô email ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        self.client.post("/auth/check-email", json=data, name="/auth/check-email")