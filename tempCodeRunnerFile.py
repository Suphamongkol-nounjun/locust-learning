
# # üö® ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Credentials ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Login
# # (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ Username/Password ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
# USER_CREDENTIALS = {
#     "username": os.environ.get("LOCUST_TEST_USERNAME", "default_username"),
#     "password": os.environ.get("LOCUST_TEST_PASSWORD", "default_password"),
#     "device": os.environ.get("LOCUST_TEST_DEVICE", "BACKEND") 
# }

# class HendrixAPILoadTest(HttpUser):
#     """
#     User Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Load Test ‡∏£‡∏∞‡∏ö‡∏ö Hendrix API
#     """
#     # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Requests: 1 ‡∏ñ‡∏∂‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
#     wait_time = between(1, 5) 

#     def on_start(self):
#         """
#         ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ User ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login)
#         API: POST {{baseUrl}}/auth/login
#         """
#         print("--- Attempting Login ---")
#         # ‡πÉ‡∏ä‡πâ Path /auth/login ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î name ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Locust UI ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
#         response = self.client.post(
#             "/auth/login",
#             json=USER_CREDENTIALS,
#             name="/auth/login"
#         )
        
#         if response.status_code == 200:
#             print("Login successful! Session started.")
#             # Cookie (Session Token) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏î‡∏¢ Locust Client ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
#         else:
#             print(f"Login failed! Status: {response.status_code}. Stopping user.")
#             # ‡∏ñ‡πâ‡∏≤ Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á User ‡∏ô‡∏µ‡πâ
#             self.environment.runner.quit() 


#     # ------------------ Task ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á User (‡∏´‡∏•‡∏±‡∏á Login) ------------------

#     @task(3)
#     def verify_session(self):
#         """
#         Task: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Session
#         API: GET {{baseUrl}}/auth/verify
#         """
#         # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Path ‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
#         self.client.get("/auth/verify", name="/auth/verify")


#     @task(5)
#     def get_library_song_list(self):
#         """
#         Task: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å Library (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å)
#         API: GET {{baseUrl}}/library/song/list
#         """
#         # (5) ‡∏Ñ‡∏∑‡∏≠ Weight: Task ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Task ‡∏≠‡∏∑‡πà‡∏ô‡πÜ 5 ‡πÄ‡∏ó‡πà‡∏≤
#         self.client.get("/library/song/list", name="/library/song/list")


#     @task(2)
#     def get_user_organization(self):
#         """
#         Task: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
#         API: GET {{baseUrl}}/user/organization
#         """
#         self.client.get("/user/organization", name="/user/organization")

    
#     @task(1)
#     def check_email_existence(self):
#         """
#         Task: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏õ‡πá‡∏ô Task ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≤)
#         API: POST {{baseUrl}}/auth/check-email
#         """
#         data = {"email": USER_CREDENTIALS["username"]} # ‡πÉ‡∏ä‡πâ username ‡πÄ‡∏õ‡πá‡∏ô email ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
#         self.client.post("/auth/check-email", json=data, name="/auth/check-email")